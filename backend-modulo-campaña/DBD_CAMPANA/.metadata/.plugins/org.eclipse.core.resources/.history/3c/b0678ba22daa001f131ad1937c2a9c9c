package com.example.yapeback.service;


import com.example.yapeback.interfaces.RecursosRepository;
import com.example.yapeback.interfaces.RecursosServiceInterface;
import com.example.yapeback.model.Recursos;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Service
public class RecursosService implements RecursosServiceInterface {

    private final String RUTA_DIRECTORIO = "C:/uploads/";

    @Autowired
    private RecursosRepository recursosRepository;

    @Override
    public void guardarRecurso(Recursos recurso) {
        recursosRepository.save(recurso);
    }
    
    private final JdbcTemplate jdbcTemplate;

    public RecursosService(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }
    
    public Recursos encontrarPorPrototipoYTipo(Integer cod_prototipo, Integer id_tipo_recurso) {
        return recursosRepository.findByCodPrototipoAndIdTipoRecurso(cod_prototipo, id_tipo_recurso);
    }
    @Override
    public void actualizarUrl_recurso(String url_recurso, Integer cod_prototipo, Integer id_tipo_recurso) {
        recursosRepository.actualizarUrlRecurso(url_recurso, cod_prototipo, id_tipo_recurso);
    }

    @Override
    public String guardarArchivo(MultipartFile file) {
        String nombreArchivo = System.currentTimeMillis() + "_" + file.getOriginalFilename();
        // Asegúrate de que la carpeta 'uploads' esté en la raíz del proyecto o en el directorio adecuado
        Path rutaArchivo = Paths.get("uploads/" + nombreArchivo);  // Ruta relativa a la raíz del proyecto

        try {
            // Crear la carpeta si no existe
            Files.createDirectories(rutaArchivo.getParent());
            // Guardar el archivo en la carpeta
            file.transferTo(rutaArchivo.toFile());
            // Retornar la ruta pública que el frontend puede usar
            return "/uploads/" + nombreArchivo;  // Ruta accesible desde el navegador
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public List<Recursos> obtenerRecursosPorPrototipo(Integer codPrototipo) {
        String sql = """
                SELECT 
                    r.id_recurso_prot, 
                    r.nombre_recurso, 
                    r.url_recurso, 
                    r.id_tipo_recurso, 
                    r.cod_prototipo
                FROM 
                    Recursos r
                JOIN 
                    Tipo_recurso tr ON r.id_tipo_recurso = tr.id_tipo_recurso
                JOIN 
                    Prototipo p ON r.cod_prototipo = p.cod_prototipo
                WHERE 
                    p.cod_prototipo = ?
                ORDER BY 
                    r.nombre_recurso
                """;

        RowMapper<Recursos> rowMapper = (rs, rowNum) -> {
            Recursos recurso = new Recursos();
            recurso.setId_recurso_prot(rs.getInt("id_recurso_prot"));
            recurso.setNombre_recurso(rs.getString("nombre_recurso"));
            recurso.setUrl_recurso(rs.getString("url_recurso"));
            recurso.setId_tipo_recurso(rs.getInt("id_tipo_recurso"));
            recurso.setCod_prototipo(rs.getInt("cod_prototipo"));
            return recurso;
        };
		return jdbcTemplate.query(sql, rowMapper, codPrototipo);
    }
    
}

