package com.example.yapeback.service;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;

import com.example.yapeback.model.PrototipoXCanal;

@Service
public class CampanaService {

    @Autowired
    private JdbcTemplate jdbcTemplate;
    
 

    public Map<String, Object> obtenerDetallesPrototipo(Integer codPrototipo) {
        String sql = "SELECT " +
                     "p.nombre_prot, " +
                     "e.Nombre || ' ' || e.Apellido AS Autor, " +
                     "ep.estado_prot, " +
                     "STRING_AGG(DISTINCT c.nombre_canal, ', ') AS Canal_difusion, " +
                     "a.id_audiencia, " +
                     "a.Edad_rango, " +
                     "a.Genero, " +
                     "a.Ubicacion, " +
                     "p.Prop_presupuesto AS Presupuesto, " +
                     "STRING_AGG(DISTINCT o.Descripcion, ', ') AS Objetivos, " +
                     "r.url_recurso AS Foto " +  
                     "FROM Prototipo p " +
                     "JOIN Empleado e ON p.ID_empleado = e.ID_empleado " +
                     "JOIN Audiencia a ON p.Prop_audiencia = a.id_audiencia " +
                     "LEFT JOIN Estado_prototipo ep ON p.cod_est_prot = ep.cod_est_prot " +
                     "LEFT JOIN prototipoxcanal pc ON p.cod_prototipo = pc.cod_prototipo " +
                     "LEFT JOIN Canal c ON pc.cod_canal = c.cod_canal " +
                     "LEFT JOIN Objetivos o ON p.cod_prototipo = o.cod_prototipo " +
                     "LEFT JOIN Recursos r ON p.cod_prototipo = r.cod_prototipo " +
                     "AND r.id_tipo_recurso = (SELECT id_tipo_recurso FROM Tipo_recurso WHERE nombre_tipo = 'Foto') " +
                     "WHERE p.cod_prototipo = ? " +
                     "GROUP BY p.cod_prototipo, e.Nombre, e.Apellido, ep.estado_prot, " +
                     "a.id_audiencia, a.Edad_rango, a.Genero, a.Ubicacion, p.Prop_presupuesto, r.url_recurso " +
        			 "LIMIT 1";
        return jdbcTemplate.queryForMap(sql, codPrototipo);
    }
    
    public int insertarCampanaPublicitaria(int codPrototipo) {
        String sql = """
            INSERT INTO Campana_Publicitaria 
                (Resultado, Presupuesto, Nombre_campana, Audiencia, fecha_publicacion, fecha_finalizacion, cod_promocion, cod_prototipo)
            SELECT 
                ?,                                  -- Resultado genérico
                p.Prop_presupuesto,                -- Presupuesto del prototipo
                p.nombre_prot,                     -- Nombre del prototipo
                p.Prop_audiencia,                  -- Audiencia del prototipo
                ?,                                  -- Fecha de publicación
                ?,                                  -- Fecha de finalización
                ?,                                  -- Código de promoción
                p.cod_prototipo                    -- Código del prototipo
            FROM 
                Prototipo p
            WHERE 
                p.cod_prototipo = ?;
        """;

        // Datos a insertar
        String resultado = "Resultado Predefinido";
        LocalDateTime fechaPublicacion = LocalDateTime.now();
        LocalDateTime fechaFinalizacion = fechaPublicacion.plusDays(30);
        int codPromocion = 1; // Ajusta este valor según corresponda

        // Ejecución del SQL con los parámetros
        return jdbcTemplate.update(sql, 
            resultado, 
            fechaPublicacion, 
            fechaFinalizacion, 
            codPromocion, 
            codPrototipo
        );
    }
    
    public List<Map<String, Object>> obtenerCampanasConImagenes() {
        String sql = """
            SELECT 
                c.Nombre_campana,
                p.descripcion,
                c.fecha_publicacion,
                r.url_recurso,
                p.cod_prototipo
            FROM 
                Campana_Publicitaria c
            JOIN 
                Prototipo p ON c.cod_prototipo = p.cod_prototipo
            JOIN 
                Recursos r ON p.cod_prototipo = r.cod_prototipo
            WHERE 
                r.id_tipo_recurso = (
                    SELECT id_tipo_recurso 
                    FROM Tipo_recurso 
                    WHERE nombre_tipo = 'Foto'
                );
        """;

        return jdbcTemplate.query(sql, new RowMapper<Map<String, Object>>() {
            @Override
            public Map<String, Object> mapRow(ResultSet rs, int rowNum) throws SQLException {
                Map<String, Object> result = new HashMap<>();
                result.put("nombreCampana", rs.getString("Nombre_campana"));
                result.put("descripcion", rs.getString("descripcion"));
                result.put("fechaPublicacion", rs.getTimestamp("fecha_publicacion").toLocalDateTime());
                result.put("urlRecurso", rs.getString("url_recurso"));
                result.put("codPrototipo", rs.getInt("cod_prototipo"));
                return result;
            }
        });
    }
    public List<PrototipoXCanal> getMetricsByCampaign(int cod_campana) {
        String sql = """
            SELECT 
                c.nombre_canal,
                pc.cod_prototipo,
                pc.cod_canal,
                pc.impresiones,
                pc.clics,
                pc.conversiones,
                (pc.clics::numeric / NULLIF(pc.impresiones, 0)) * 100 AS ctr,
                (pc.conversiones::numeric / NULLIF(pc.clics, 0)) * 100 AS conversionRate,
                (cp.Presupuesto / NULLIF(pc.conversiones, 0)) AS cpc
            FROM 
                Campana_Publicitaria cp
            JOIN 
                prototipoxcanal pc ON cp.cod_prototipo = pc.cod_prototipo
            JOIN 
                Canal c ON pc.cod_canal = c.cod_canal
            WHERE 
                cp.cod_campana = ?
        """;

        return jdbcTemplate.query(sql, new RowMapper<PrototipoXCanal>() {
            @Override
            public PrototipoXCanal mapRow(ResultSet rs, int rowNum) throws SQLException {
                PrototipoXCanal metrics = new PrototipoXCanal();
                metrics.setCod_prototipo(rs.getInt("cod_prototipo"));
                metrics.setCod_canal(rs.getInt("cod_canal"));
                metrics.setImpresiones(rs.getInt("impresiones"));
                metrics.setClics(rs.getInt("clics"));
                metrics.setConversiones(rs.getInt("conversiones"));
                metrics.setCtr(rs.getDouble("ctr"));
                metrics.setConversionRate(rs.getDouble("conversionRate"));
                metrics.setCpc(rs.getDouble("cpc"));
                metrics.setNombre_canal(rs.getString("nombre_canal"));
                return metrics;
            }
        }, codCampana); // Aquí se pasa codCampana como argumento varargs
    }

}

